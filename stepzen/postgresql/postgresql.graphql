"""
Table 'comment' aliased as GQLName: 'Comment'
"""
type Comment {
  created_at: DateTime
  id: ID!
  post_id: ID
  text: String
  username: String
}

"""
Table: 'Posts'
"""
type Posts {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subreddit_id: ID
  tittle: String
  username: String
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{name: "post_id", field: "id"}]
    )
  comments: [Comment]
    @materializer(
      query: "getCommentByPostId"
      arguments: [{name: "post_id", field: "id"}]
    )
  subreddit: [Subreddit]
    @materializer(
      query: "getSubredditListById",
      arguments: [{ name: "id", field: "subreddit_id"}]
    )
}

"""
Table 'subreddit' aliased as GQLName: 'Subreddit'
"""
type Subreddit @key(fields: "topic, id") {
  created_at: DateTime
  id: ID!
  topic: String
}

"""
Table 'vote' aliased as GQLName: 'Vote'
"""
type Vote {
  created_at: DateTime
  id: ID!
  post_id: ID
  upvote: Boolean
  username: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )

  getSubredditListById(id: ID!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )

  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "vote" WHERE "post_id" = $1
      ORDER BY "created_at" DESC
      """
      configuration: "postgresql_config"
    )
  
  getCommentByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )

  getCommentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Posts' "
  getPostsBySubreddit_id(subreddit_id: ID!): [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      configuration: "postgresql_config"
    )
  getPostsBySubreddit_idAndBody(subreddit_id: ID!, body: String!): [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      configuration: "postgresql_config"
    )
  "Doesn't order the required way"
  getPostsList: [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "Posts" 
      order by "Posts"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostsListByTopic(topic: String!): [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "Posts".id as id 
      FROM "Posts" join "subreddit" on "subreddit"."id" = "Posts"."subreddit_id"
      where "subreddit"."topic" = $1
      order by "Posts"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  
  getPostListByPostId(post_id: ID!): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * from "Posts" where "Posts"."id" = $1
      """
      configuration: "postgresql_config"
    )

  getPostsPaginatedList(first: Int, after: Int): [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "tittle", "username" FROM "Posts" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Subreddit' "
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubredditListByTopic(topic: String!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "subreddit" WHERE "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getSubredditPaginatedList(first: Int, after: Int): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getSubredditListLimit(limit: Int!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit" order by "created_at" desc limit $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Vote' "
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVotePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(
    username: String!
    post_id: ID!
    text: String!
    id: ID!
    created_at: DateTime!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    username: String!
    post_id: ID!
    text: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'Posts' "
  deletePosts(
    body: String!
    tittle: String!
    subreddit_id: ID!
    id: ID!
    created_at: DateTime!
    username: String!
    image: String!
  ): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPosts(
    body: String
    tittle: String
    subreddit_id: ID
    username: String
    image: String
  ): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'Subreddit' "
  deleteSubreddit(topic: String!, created_at: DateTime!, id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )

  insertSubreddit(topic: String!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
    
  " Mutations for type 'Vote' "
  deleteVote(
    username: String!
    post_id: ID!
    id: ID!
    created_at: DateTime!
    upvote: Boolean!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    username: String
    post_id: ID
    upvote: Boolean
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
